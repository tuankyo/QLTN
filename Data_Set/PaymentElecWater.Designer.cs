//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Man.Data_Set {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PaymentElecWater")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PaymentElecWater : global::System.Data.DataSet {
        
        private dsPaymentElecWaterDataTable tabledsPaymentElecWater;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PaymentElecWater() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PaymentElecWater(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dsPaymentElecWater"] != null)) {
                    base.Tables.Add(new dsPaymentElecWaterDataTable(ds.Tables["dsPaymentElecWater"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dsPaymentElecWaterDataTable dsPaymentElecWater {
            get {
                return this.tabledsPaymentElecWater;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PaymentElecWater cln = ((PaymentElecWater)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dsPaymentElecWater"] != null)) {
                    base.Tables.Add(new dsPaymentElecWaterDataTable(ds.Tables["dsPaymentElecWater"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledsPaymentElecWater = ((dsPaymentElecWaterDataTable)(base.Tables["dsPaymentElecWater"]));
            if ((initTable == true)) {
                if ((this.tabledsPaymentElecWater != null)) {
                    this.tabledsPaymentElecWater.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PaymentElecWater";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PaymentBooking.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledsPaymentElecWater = new dsPaymentElecWaterDataTable();
            base.Tables.Add(this.tabledsPaymentElecWater);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedsPaymentElecWater() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PaymentElecWater ds = new PaymentElecWater();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dsPaymentElecWaterRowChangeEventHandler(object sender, dsPaymentElecWaterRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dsPaymentElecWaterDataTable : global::System.Data.TypedTableBase<dsPaymentElecWaterRow> {
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnYearMonth;
            
            private global::System.Data.DataColumn columnBuildingId;
            
            private global::System.Data.DataColumn columnCustomerId;
            
            private global::System.Data.DataColumn columnRoomId;
            
            private global::System.Data.DataColumn columnUsedElecWaterId;
            
            private global::System.Data.DataColumn columnTarrifsOfElecId;
            
            private global::System.Data.DataColumn columnTarrifsOfWaterId;
            
            private global::System.Data.DataColumn columnDateFrom;
            
            private global::System.Data.DataColumn columnDateTo;
            
            private global::System.Data.DataColumn columnOldIndex;
            
            private global::System.Data.DataColumn columnNewIndex;
            
            private global::System.Data.DataColumn columnMount;
            
            private global::System.Data.DataColumn columnVAT;
            
            private global::System.Data.DataColumn columnOtherFee01;
            
            private global::System.Data.DataColumn columnOtherFee02;
            
            private global::System.Data.DataColumn columnVatUSD;
            
            private global::System.Data.DataColumn columnVatVND;
            
            private global::System.Data.DataColumn columnSumUSD;
            
            private global::System.Data.DataColumn columnSumVND;
            
            private global::System.Data.DataColumn columnLastPriceUSD;
            
            private global::System.Data.DataColumn columnLastPriceVND;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsPaymentElecWaterDataTable() {
                this.TableName = "dsPaymentElecWater";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dsPaymentElecWaterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dsPaymentElecWaterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearMonthColumn {
                get {
                    return this.columnYearMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuildingIdColumn {
                get {
                    return this.columnBuildingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerIdColumn {
                get {
                    return this.columnCustomerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoomIdColumn {
                get {
                    return this.columnRoomId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsedElecWaterIdColumn {
                get {
                    return this.columnUsedElecWaterId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TarrifsOfElecIdColumn {
                get {
                    return this.columnTarrifsOfElecId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TarrifsOfWaterIdColumn {
                get {
                    return this.columnTarrifsOfWaterId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateFromColumn {
                get {
                    return this.columnDateFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateToColumn {
                get {
                    return this.columnDateTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OldIndexColumn {
                get {
                    return this.columnOldIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewIndexColumn {
                get {
                    return this.columnNewIndex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MountColumn {
                get {
                    return this.columnMount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VATColumn {
                get {
                    return this.columnVAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherFee01Column {
                get {
                    return this.columnOtherFee01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OtherFee02Column {
                get {
                    return this.columnOtherFee02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VatUSDColumn {
                get {
                    return this.columnVatUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VatVNDColumn {
                get {
                    return this.columnVatVND;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumUSDColumn {
                get {
                    return this.columnSumUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SumVNDColumn {
                get {
                    return this.columnSumVND;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastPriceUSDColumn {
                get {
                    return this.columnLastPriceUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastPriceVNDColumn {
                get {
                    return this.columnLastPriceVND;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsPaymentElecWaterRow this[int index] {
                get {
                    return ((dsPaymentElecWaterRow)(this.Rows[index]));
                }
            }
            
            public event dsPaymentElecWaterRowChangeEventHandler dsPaymentElecWaterRowChanging;
            
            public event dsPaymentElecWaterRowChangeEventHandler dsPaymentElecWaterRowChanged;
            
            public event dsPaymentElecWaterRowChangeEventHandler dsPaymentElecWaterRowDeleting;
            
            public event dsPaymentElecWaterRowChangeEventHandler dsPaymentElecWaterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddsPaymentElecWaterRow(dsPaymentElecWaterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsPaymentElecWaterRow AdddsPaymentElecWaterRow(
                        string id, 
                        string YearMonth, 
                        string BuildingId, 
                        string CustomerId, 
                        string RoomId, 
                        string UsedElecWaterId, 
                        string TarrifsOfElecId, 
                        string TarrifsOfWaterId, 
                        string DateFrom, 
                        string DateTo, 
                        string OldIndex, 
                        string NewIndex, 
                        string Mount, 
                        string VAT, 
                        string OtherFee01, 
                        string OtherFee02, 
                        string VatUSD, 
                        string VatVND, 
                        string SumUSD, 
                        string SumVND, 
                        string LastPriceUSD, 
                        string LastPriceVND) {
                dsPaymentElecWaterRow rowdsPaymentElecWaterRow = ((dsPaymentElecWaterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        id,
                        YearMonth,
                        BuildingId,
                        CustomerId,
                        RoomId,
                        UsedElecWaterId,
                        TarrifsOfElecId,
                        TarrifsOfWaterId,
                        DateFrom,
                        DateTo,
                        OldIndex,
                        NewIndex,
                        Mount,
                        VAT,
                        OtherFee01,
                        OtherFee02,
                        VatUSD,
                        VatVND,
                        SumUSD,
                        SumVND,
                        LastPriceUSD,
                        LastPriceVND};
                rowdsPaymentElecWaterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdsPaymentElecWaterRow);
                return rowdsPaymentElecWaterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dsPaymentElecWaterDataTable cln = ((dsPaymentElecWaterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dsPaymentElecWaterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnid = base.Columns["id"];
                this.columnYearMonth = base.Columns["YearMonth"];
                this.columnBuildingId = base.Columns["BuildingId"];
                this.columnCustomerId = base.Columns["CustomerId"];
                this.columnRoomId = base.Columns["RoomId"];
                this.columnUsedElecWaterId = base.Columns["UsedElecWaterId"];
                this.columnTarrifsOfElecId = base.Columns["TarrifsOfElecId"];
                this.columnTarrifsOfWaterId = base.Columns["TarrifsOfWaterId"];
                this.columnDateFrom = base.Columns["DateFrom"];
                this.columnDateTo = base.Columns["DateTo"];
                this.columnOldIndex = base.Columns["OldIndex"];
                this.columnNewIndex = base.Columns["NewIndex"];
                this.columnMount = base.Columns["Mount"];
                this.columnVAT = base.Columns["VAT"];
                this.columnOtherFee01 = base.Columns["OtherFee01"];
                this.columnOtherFee02 = base.Columns["OtherFee02"];
                this.columnVatUSD = base.Columns["VatUSD"];
                this.columnVatVND = base.Columns["VatVND"];
                this.columnSumUSD = base.Columns["SumUSD"];
                this.columnSumVND = base.Columns["SumVND"];
                this.columnLastPriceUSD = base.Columns["LastPriceUSD"];
                this.columnLastPriceVND = base.Columns["LastPriceVND"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnid = new global::System.Data.DataColumn("id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnYearMonth = new global::System.Data.DataColumn("YearMonth", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYearMonth);
                this.columnBuildingId = new global::System.Data.DataColumn("BuildingId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingId);
                this.columnCustomerId = new global::System.Data.DataColumn("CustomerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerId);
                this.columnRoomId = new global::System.Data.DataColumn("RoomId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoomId);
                this.columnUsedElecWaterId = new global::System.Data.DataColumn("UsedElecWaterId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsedElecWaterId);
                this.columnTarrifsOfElecId = new global::System.Data.DataColumn("TarrifsOfElecId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTarrifsOfElecId);
                this.columnTarrifsOfWaterId = new global::System.Data.DataColumn("TarrifsOfWaterId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTarrifsOfWaterId);
                this.columnDateFrom = new global::System.Data.DataColumn("DateFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateFrom);
                this.columnDateTo = new global::System.Data.DataColumn("DateTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTo);
                this.columnOldIndex = new global::System.Data.DataColumn("OldIndex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOldIndex);
                this.columnNewIndex = new global::System.Data.DataColumn("NewIndex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewIndex);
                this.columnMount = new global::System.Data.DataColumn("Mount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMount);
                this.columnVAT = new global::System.Data.DataColumn("VAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVAT);
                this.columnOtherFee01 = new global::System.Data.DataColumn("OtherFee01", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherFee01);
                this.columnOtherFee02 = new global::System.Data.DataColumn("OtherFee02", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherFee02);
                this.columnVatUSD = new global::System.Data.DataColumn("VatUSD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVatUSD);
                this.columnVatVND = new global::System.Data.DataColumn("VatVND", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVatVND);
                this.columnSumUSD = new global::System.Data.DataColumn("SumUSD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumUSD);
                this.columnSumVND = new global::System.Data.DataColumn("SumVND", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSumVND);
                this.columnLastPriceUSD = new global::System.Data.DataColumn("LastPriceUSD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastPriceUSD);
                this.columnLastPriceVND = new global::System.Data.DataColumn("LastPriceVND", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastPriceVND);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsPaymentElecWaterRow NewdsPaymentElecWaterRow() {
                return ((dsPaymentElecWaterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dsPaymentElecWaterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dsPaymentElecWaterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dsPaymentElecWaterRowChanged != null)) {
                    this.dsPaymentElecWaterRowChanged(this, new dsPaymentElecWaterRowChangeEvent(((dsPaymentElecWaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dsPaymentElecWaterRowChanging != null)) {
                    this.dsPaymentElecWaterRowChanging(this, new dsPaymentElecWaterRowChangeEvent(((dsPaymentElecWaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dsPaymentElecWaterRowDeleted != null)) {
                    this.dsPaymentElecWaterRowDeleted(this, new dsPaymentElecWaterRowChangeEvent(((dsPaymentElecWaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dsPaymentElecWaterRowDeleting != null)) {
                    this.dsPaymentElecWaterRowDeleting(this, new dsPaymentElecWaterRowChangeEvent(((dsPaymentElecWaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedsPaymentElecWaterRow(dsPaymentElecWaterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PaymentElecWater ds = new PaymentElecWater();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dsPaymentElecWaterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dsPaymentElecWaterRow : global::System.Data.DataRow {
            
            private dsPaymentElecWaterDataTable tabledsPaymentElecWater;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dsPaymentElecWaterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledsPaymentElecWater = ((dsPaymentElecWaterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string id {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'id\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string YearMonth {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.YearMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'YearMonth\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.YearMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuildingId {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.BuildingIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuildingId\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.BuildingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerId {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.CustomerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerId\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.CustomerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RoomId {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.RoomIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RoomId\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.RoomIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UsedElecWaterId {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.UsedElecWaterIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsedElecWaterId\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.UsedElecWaterIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TarrifsOfElecId {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.TarrifsOfElecIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TarrifsOfElecId\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.TarrifsOfElecIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TarrifsOfWaterId {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.TarrifsOfWaterIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TarrifsOfWaterId\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.TarrifsOfWaterIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateFrom {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.DateFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateFrom\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.DateFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateTo {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.DateToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTo\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.DateToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OldIndex {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.OldIndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OldIndex\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.OldIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NewIndex {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.NewIndexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewIndex\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.NewIndexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mount {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.MountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mount\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.MountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VAT {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.VATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VAT\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.VATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherFee01 {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.OtherFee01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherFee01\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.OtherFee01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OtherFee02 {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.OtherFee02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OtherFee02\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.OtherFee02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VatUSD {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.VatUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VatUSD\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.VatUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VatVND {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.VatVNDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VatVND\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.VatVNDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SumUSD {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.SumUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumUSD\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.SumUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SumVND {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.SumVNDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SumVND\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.SumVNDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastPriceUSD {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.LastPriceUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastPriceUSD\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.LastPriceUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastPriceVND {
                get {
                    try {
                        return ((string)(this[this.tabledsPaymentElecWater.LastPriceVNDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastPriceVND\' in table \'dsPaymentElecWater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledsPaymentElecWater.LastPriceVNDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsidNull() {
                return this.IsNull(this.tabledsPaymentElecWater.idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetidNull() {
                this[this.tabledsPaymentElecWater.idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearMonthNull() {
                return this.IsNull(this.tabledsPaymentElecWater.YearMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearMonthNull() {
                this[this.tabledsPaymentElecWater.YearMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuildingIdNull() {
                return this.IsNull(this.tabledsPaymentElecWater.BuildingIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuildingIdNull() {
                this[this.tabledsPaymentElecWater.BuildingIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerIdNull() {
                return this.IsNull(this.tabledsPaymentElecWater.CustomerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerIdNull() {
                this[this.tabledsPaymentElecWater.CustomerIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoomIdNull() {
                return this.IsNull(this.tabledsPaymentElecWater.RoomIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoomIdNull() {
                this[this.tabledsPaymentElecWater.RoomIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsedElecWaterIdNull() {
                return this.IsNull(this.tabledsPaymentElecWater.UsedElecWaterIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsedElecWaterIdNull() {
                this[this.tabledsPaymentElecWater.UsedElecWaterIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTarrifsOfElecIdNull() {
                return this.IsNull(this.tabledsPaymentElecWater.TarrifsOfElecIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTarrifsOfElecIdNull() {
                this[this.tabledsPaymentElecWater.TarrifsOfElecIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTarrifsOfWaterIdNull() {
                return this.IsNull(this.tabledsPaymentElecWater.TarrifsOfWaterIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTarrifsOfWaterIdNull() {
                this[this.tabledsPaymentElecWater.TarrifsOfWaterIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateFromNull() {
                return this.IsNull(this.tabledsPaymentElecWater.DateFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateFromNull() {
                this[this.tabledsPaymentElecWater.DateFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateToNull() {
                return this.IsNull(this.tabledsPaymentElecWater.DateToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateToNull() {
                this[this.tabledsPaymentElecWater.DateToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOldIndexNull() {
                return this.IsNull(this.tabledsPaymentElecWater.OldIndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOldIndexNull() {
                this[this.tabledsPaymentElecWater.OldIndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewIndexNull() {
                return this.IsNull(this.tabledsPaymentElecWater.NewIndexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewIndexNull() {
                this[this.tabledsPaymentElecWater.NewIndexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMountNull() {
                return this.IsNull(this.tabledsPaymentElecWater.MountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMountNull() {
                this[this.tabledsPaymentElecWater.MountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVATNull() {
                return this.IsNull(this.tabledsPaymentElecWater.VATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVATNull() {
                this[this.tabledsPaymentElecWater.VATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherFee01Null() {
                return this.IsNull(this.tabledsPaymentElecWater.OtherFee01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherFee01Null() {
                this[this.tabledsPaymentElecWater.OtherFee01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOtherFee02Null() {
                return this.IsNull(this.tabledsPaymentElecWater.OtherFee02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOtherFee02Null() {
                this[this.tabledsPaymentElecWater.OtherFee02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVatUSDNull() {
                return this.IsNull(this.tabledsPaymentElecWater.VatUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVatUSDNull() {
                this[this.tabledsPaymentElecWater.VatUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVatVNDNull() {
                return this.IsNull(this.tabledsPaymentElecWater.VatVNDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVatVNDNull() {
                this[this.tabledsPaymentElecWater.VatVNDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumUSDNull() {
                return this.IsNull(this.tabledsPaymentElecWater.SumUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumUSDNull() {
                this[this.tabledsPaymentElecWater.SumUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSumVNDNull() {
                return this.IsNull(this.tabledsPaymentElecWater.SumVNDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSumVNDNull() {
                this[this.tabledsPaymentElecWater.SumVNDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastPriceUSDNull() {
                return this.IsNull(this.tabledsPaymentElecWater.LastPriceUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastPriceUSDNull() {
                this[this.tabledsPaymentElecWater.LastPriceUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastPriceVNDNull() {
                return this.IsNull(this.tabledsPaymentElecWater.LastPriceVNDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastPriceVNDNull() {
                this[this.tabledsPaymentElecWater.LastPriceVNDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dsPaymentElecWaterRowChangeEvent : global::System.EventArgs {
            
            private dsPaymentElecWaterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsPaymentElecWaterRowChangeEvent(dsPaymentElecWaterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dsPaymentElecWaterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591